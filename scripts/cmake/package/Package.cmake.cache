IF (CMAKE_BUILD_TYPE MATCHES "Release")
	set(DESKTOP_LINK_NAME "Creality Print")
    string(REPLACE " " "_" CPACK_FILE_NAME_NO_SPACES "${DESKTOP_LINK_NAME}")
	macro(prepareNSIS_Link linkName appName params) 
		#prepare start menu links 
		LIST(APPEND CPACK_NSIS_CREATE_ICONS_EXTRA " CreateShortCut '$SMPROGRAMS\\\\$STARTMENU_FOLDER\\\\${linkName}.lnk' '$INSTDIR\\\\${appName}.exe' '${params}'") 
		LIST(APPEND CPACK_NSIS_DELETE_ICONS_EXTRA " Delete '$SMPROGRAMS\\\\$START_MENU\\\\${linkName}.lnk'") 
	
		#prepare desktop links 
		LIST(APPEND CPACK_NSIS_CREATE_ICONS_EXTRA " CreateShortCut '$DESKTOP\\\\${linkName}.lnk' '$INSTDIR\\\\${appName}.exe' '${params}'") 
		LIST(APPEND CPACK_NSIS_DELETE_ICONS_EXTRA " Delete '$DESKTOP\\\\${linkName}.lnk'") 

        SET(CPACK_SOFEWARE_PROCESS_NAME "${appName}.exe")
		LIST(APPEND CPACK_ONINIT_DELETE_DESTOP_LINK "Delete '$DESKTOP\\\\${linkName}.lnk'") 
	endmacro() 

    #option(PROJECT_VERSION_MAJOR "option for version major" 0)
    #option(PROJECT_VERSION_MINOR "option for version minor" 0)
    #option(PROJECT_VERSION_PATCH "option for patch" 1)
	#option(PROJECT_BUILD_ID "option for build" 1)
	#option(PROJECT_VERSION_EXTRA "rc beta alpha" "alpha")
    
    SET(CMAKE_INSTALL_PREFIX ${RUNTIME_OUTPUT_DIRECTORY_RELEASE})
    
    SET(PROJECT_VERSION "${PROJECT_VERSION_MAJOR}.${PROJECT_VERSION_MINOR}.${PROJECT_VERSION_PATCH}.${PROJECT_BUILD_ID}")
    message(STATUS ${PROJECT_VERSION_MAJOR})
    SET(CPACK_GENERATOR "TBZ2")
    SET(CPACK_PACKAGE_VERSION_MAJOR "${PROJECT_VERSION_MAJOR}")
    SET(CPACK_PACKAGE_VERSION_MINOR "${PROJECT_VERSION_MINOR}")
    SET(CPACK_PACKAGE_VERSION_PATCH "${PROJECT_VERSION_PATCH}")
    SET(CPACK_PACKAGE_VERSION "${PROJECT_VERSION}")
    SET(CPACK_PACKAGE_VENDOR "${PROJECT_VENDOR}")
    SET(CPACK_RESOURCE_FILE_README "${CMAKE_SOURCE_DIR}/${README_FILE}")
    SET(PROJECT_ICONS_DIRECTORY "${CMAKE_CURRENT_SOURCE_DIR}/package/icon")
    set(LICENSE_FILE "license.rtf")
    set(LICENSE_FILE_EN "license_en.rtf")
    set(LICENSE_FILE_TD "license.rtf")

    IF(WIN32)
        INSTALL(TARGETS ${INSTALL_LIBS} RUNTIME DESTINATION .)
		INSTALL(FILES  $ENV{USR_INSTALL_ROOT}/bin/Release/dxflib.dll DESTINATION .)
		INSTALL(FILES  $ENV{USR_INSTALL_ROOT}/bin/Release/freeglut.dll DESTINATION .)
		INSTALL(FILES  $ENV{USR_INSTALL_ROOT}/bin/Release/zlib.dll DESTINATION .)
		INSTALL(FILES  $ENV{USR_INSTALL_ROOT}/bin/Release/quazip.dll DESTINATION .)
		INSTALL(FILES  $ENV{USR_INSTALL_ROOT}/bin/Release/freetype.dll DESTINATION .)
		INSTALL(FILES  $ENV{USR_INSTALL_ROOT}/bin/Release/librevenge.dll DESTINATION .)
		INSTALL(FILES  $ENV{USR_INSTALL_ROOT}/bin/Release/AliyunOss.dll DESTINATION .)
		INSTALL(FILES  $ENV{USR_INSTALL_ROOT}/bin/Release/curl.dll DESTINATION .)
        INSTALL(FILES  $ENV{USR_INSTALL_ROOT}/bin/Release/opennurbs.dll DESTINATION .)
        INSTALL(FILES  $ENV{USR_INSTALL_ROOT}/bin/Release/TKBO.dll DESTINATION .)
        INSTALL(FILES  $ENV{USR_INSTALL_ROOT}/bin/Release/TKBool.dll DESTINATION .)
        INSTALL(FILES  $ENV{USR_INSTALL_ROOT}/bin/Release/TKernel.dll DESTINATION .)
        INSTALL(FILES  $ENV{USR_INSTALL_ROOT}/bin/Release/TKG2d.dll DESTINATION .)
        INSTALL(FILES  $ENV{USR_INSTALL_ROOT}/bin/Release/TKG3d.dll DESTINATION .)
        INSTALL(FILES  $ENV{USR_INSTALL_ROOT}/bin/Release/TKGeomAlgo.dll DESTINATION .)
        INSTALL(FILES  $ENV{USR_INSTALL_ROOT}/bin/Release/TKGeomBase.dll DESTINATION .)
        INSTALL(FILES  $ENV{USR_INSTALL_ROOT}/bin/Release/TKMath.dll DESTINATION .)
        INSTALL(FILES  $ENV{USR_INSTALL_ROOT}/bin/Release/TKMesh.dll DESTINATION .)
        INSTALL(FILES  $ENV{USR_INSTALL_ROOT}/bin/Release/TKPrim.dll DESTINATION .)
        INSTALL(FILES  $ENV{USR_INSTALL_ROOT}/bin/Release/TKShHealing.dll DESTINATION .)
        INSTALL(FILES  $ENV{USR_INSTALL_ROOT}/bin/Release/TKSTEP.dll DESTINATION .)
        INSTALL(FILES  $ENV{USR_INSTALL_ROOT}/bin/Release/TKSTEP209.dll DESTINATION .)
        INSTALL(FILES  $ENV{USR_INSTALL_ROOT}/bin/Release/TKSTEPAttr.dll DESTINATION .)
        INSTALL(FILES  $ENV{USR_INSTALL_ROOT}/bin/Release/TKSTEPBase.dll DESTINATION .)
        INSTALL(FILES  $ENV{USR_INSTALL_ROOT}/bin/Release/TKTopAlgo.dll DESTINATION .)
        INSTALL(FILES  $ENV{USR_INSTALL_ROOT}/bin/Release/TKXSBase.dll DESTINATION .)
        INSTALL(FILES  $ENV{USR_INSTALL_ROOT}/bin/Release/TKIGES.dll DESTINATION .)
        INSTALL(FILES  $ENV{USR_INSTALL_ROOT}/bin/Release/TKBRep.dll DESTINATION .)
        INSTALL(FILES  $ENV{USR_INSTALL_ROOT}/bin/Release/cmesh.dll DESTINATION .)
        INSTALL(FILES  $ENV{USR_INSTALL_ROOT}/bin/Release/stringutil.dll DESTINATION .)
        INSTALL(FILES  $ENV{USR_INSTALL_ROOT}/bin/Release/cxbin.dll DESTINATION .)
        INSTALL(FILES  ${BIN_OUTPUT_DIR}/Release/avcodec-58.dll DESTINATION .)
        INSTALL(FILES  ${BIN_OUTPUT_DIR}/Release/avdevice-58.dll DESTINATION .)
        INSTALL(FILES  ${BIN_OUTPUT_DIR}/Release/avfilter-7.dll DESTINATION .)
        INSTALL(FILES  ${BIN_OUTPUT_DIR}/Release/avformat-58.dll DESTINATION .)
        INSTALL(FILES  ${BIN_OUTPUT_DIR}/Release/avutil-56.dll DESTINATION .)
        INSTALL(FILES  ${BIN_OUTPUT_DIR}/Release/postproc-55.dll DESTINATION .)
        INSTALL(FILES  ${BIN_OUTPUT_DIR}/Release/swresample-3.dll DESTINATION .)
        INSTALL(FILES  ${BIN_OUTPUT_DIR}/Release/swscale-5.dll DESTINATION .)
        INSTALL(FILES  ${BIN_OUTPUT_DIR}/Release/PPCS_API.dll DESTINATION .)
        INSTALL(DIRECTORY "${BIN_OUTPUT_DIR}/windeployqt/" DESTINATION .)
		INSTALL(DIRECTORY "${BIN_OUTPUT_DIR}/Release/fonts" DESTINATION .)
		INSTALL(DIRECTORY "${CMAKE_SOURCE_DIR}/resources" DESTINATION .)
        
		if(CMAKE_CL_64)
            #SET(CPACK_PACKAGE_FILE_NAME "${PROJECT_NAME}-v${PROJECT_VERSION}-win64-x64-${PROJECT_VERSION_EXTRA}")
            set(CPACK_SYSTEM_NAME "win64")
            #FIND_PROGRAM(VCREDIST_X64 vcredist_x64.exe PATH runtime/x64)
			FILE(GLOB RUNTIME_DLL ${CMAKE_CURRENT_SOURCE_DIR}/package/runtime/x64/*.dll ${CMAKE_CURRENT_SOURCE_DIR}/package/runtime/x64/*.exe)
            INSTALL(FILES ${RUNTIME_DLL} DESTINATION .)
            #IF(VCREDIST_X64) 
            LIST(APPEND CPACK_NSIS_EXTRA_INSTALL_COMMANDS "ExecWait '\\\"$INSTDIR\\\\vcredist_x64.exe\\\" /q'")
            #ENDIF(VCREDIST_X64)
        else()
            #SET(CPACK_PACKAGE_FILE_NAME "${PROJECT_NAME}-${PROJECT_VERSION}-win32-x86-${PROJECT_VERSION_EXTRA}")
            set(CPACK_SYSTEM_NAME "win32")
            #FIND_PROGRAM(VCREDIST_X86 vcredist_x86.exe PATH runtime/x86)
            #IF(VCREDIST_X86)
			FILE(GLOB RUNTIME_DLL ${CMAKE_CURRENT_SOURCE_DIR}/package/runtime/x86/*.dll ${CMAKE_CURRENT_SOURCE_DIR}/package/runtime/x86/*.exe)
            INSTALL(FILES  ${RUNTIME_DLL} DESTINATION .)
            LIST(APPEND CPACK_NSIS_EXTRA_INSTALL_COMMANDS "ExecWait '\\\"$INSTDIR\\\\vcredist_x86.exe\\\" /q'")
            #ENDIF(VCREDIST_X86)
        endif()
        SET(CPACK_GENERATOR "NSIS")
		set(CPACK_NSIS_PACKAGE_NAME "${DESKTOP_LINK_NAME}")
		set(CPACK_NSIS_DISPLAY_NAME "${DESKTOP_LINK_NAME}")
        SET(CPACK_PACKAGE_EXECUTABLES "${PROJECT_NAME}" "${PROJECT_NAME}")
        SET(CPACK_PACKAGE_INSTALL_DIRECTORY "${DESKTOP_LINK_NAME}")

        SET(CPACK_RESOURCE_FILE_LICENSE "${CMAKE_SOURCE_DIR}/${LICENSE_FILE}")
        SET(CPACK_RESOURCE_FILE_LICENSE_EN "${CMAKE_SOURCE_DIR}/${LICENSE_FILE_EN}")
        SET(CPACK_RESOURCE_FILE_LICENSE_TD "${CMAKE_SOURCE_DIR}/${LICENSE_FILE_TD}")
        SET(CPACK_NSIS_EXECUTABLES_DIRECTORY ".")
        SET(CPACK_NSIS_MUI_ICON "${PROJECT_ICONS_DIRECTORY}/NSIS.ico")
        SET(CPACK_PACKAGE_ICON "${PROJECT_ICONS_DIRECTORY}\\\\NSISHeader.ico")
        SET(CPACK_NSIS_URL_INFO_ABOUT "http://${PROJECT_DOMAIN}")
        SET(CPACK_NSIS_INSTALLED_ICON_NAME "${PROJECT_NAME}${CMAKE_EXECUTABLE_SUFFIX}")
        SET(CPACK_NSIS_MENU_LINKS "${LICENSE_FILE}" "License")
        SET(CPACK_NSIS_MUI_FINISHPAGE_RUN "${CPACK_NSIS_INSTALLED_ICON_NAME}")
		set(CPACK_NSIS_MUI_WELCOMEFINISHPAGE_BITMAP ${PROJECT_ICONS_DIRECTORY}\\\\creality_banner_nsis.bmp)    # note: fails with forward '/'
		set(CPACK_NSIS_MUI_UNWELCOMEFINISHPAGE_BITMAP ${PROJECT_ICONS_DIRECTORY}\\\\creality_banner_nsis.bmp)
	    set(PRODUCT_DIR_REGKEY "Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\App Paths\\\\dpinst-x86.exe")
		set(PROGRAM_CMD "$INSTDIR\\\\${PROJECT_NAME}.exe -e %1")
		
		#include 
		
		SET(CPACK_NSIS_ADDITIONAL_SCRIPT "!include 'nsProcess.nsh'")
		SET(CPACK_PACKAGE_UNICODE "Unicode True") #Multilingual garbled
		#SET(CPACK_NSIS_DEFINES "!include 'nsProcess.nsh'")

		
		#install
		LIST(APPEND CPACK_NSIS_EXTRA_INSTALL_COMMANDS "WriteRegStr HKLM '${PRODUCT_DIR_REGKEY}' '' '$INSTDIR\\\\${PROJECT_NAME}.exe'")
		LIST(APPEND CPACK_NSIS_EXTRA_INSTALL_COMMANDS "WriteRegStr HKCR '.stl' '' 'stl_cxsw'")
		LIST(APPEND CPACK_NSIS_EXTRA_INSTALL_COMMANDS " WriteRegStr HKCR '.obj' '' 'obj_cxsw'")
		LIST(APPEND CPACK_NSIS_EXTRA_INSTALL_COMMANDS " WriteRegStr HKCR '.gcode' '' 'gcode_cxsw'")
		LIST(APPEND CPACK_NSIS_EXTRA_INSTALL_COMMANDS " WriteRegStr HKCR '.cxprj' '' 'cx3d_cxsw'")
		LIST(APPEND CPACK_NSIS_EXTRA_INSTALL_COMMANDS " WriteRegStr HKCR '.bmp' '' 'bmp_cxsw'")
		LIST(APPEND CPACK_NSIS_EXTRA_INSTALL_COMMANDS " WriteRegStr HKCR '.jpg' '' 'jpg_cxsw'")
		LIST(APPEND CPACK_NSIS_EXTRA_INSTALL_COMMANDS " WriteRegStr HKCR '.jpeg' '' 'jpeg_cxsw'")
		LIST(APPEND CPACK_NSIS_EXTRA_INSTALL_COMMANDS " WriteRegStr HKCR '.png' '' 'png_cxsw'")
		LIST(APPEND CPACK_NSIS_EXTRA_INSTALL_COMMANDS " WriteRegStr HKCR '.gtl' '' 'gtl_cxsw'")
		LIST(APPEND CPACK_NSIS_EXTRA_INSTALL_COMMANDS " WriteRegStr HKCR '.gbl' '' 'gbl_cxsw'")
		LIST(APPEND CPACK_NSIS_EXTRA_INSTALL_COMMANDS " WriteRegStr HKCR '.gbo' '' 'gbo_cxsw'")
		LIST(APPEND CPACK_NSIS_EXTRA_INSTALL_COMMANDS " WriteRegStr HKCR '.gbp' '' 'gbp_cxsw'")
		LIST(APPEND CPACK_NSIS_EXTRA_INSTALL_COMMANDS " WriteRegStr HKCR '.gbs' '' 'gbs_cxsw'")
		LIST(APPEND CPACK_NSIS_EXTRA_INSTALL_COMMANDS " WriteRegStr HKCR '.gko' '' 'gko_cxsw'")
		LIST(APPEND CPACK_NSIS_EXTRA_INSTALL_COMMANDS " WriteRegStr HKCR '.gml' '' 'gml_cxsw'")
		LIST(APPEND CPACK_NSIS_EXTRA_INSTALL_COMMANDS " WriteRegStr HKCR '.gpb' '' 'gpb_cxsw'")
		LIST(APPEND CPACK_NSIS_EXTRA_INSTALL_COMMANDS " WriteRegStr HKCR '.gpt' '' 'gpt_cxsw'")
		LIST(APPEND CPACK_NSIS_EXTRA_INSTALL_COMMANDS " WriteRegStr HKCR '.gto' '' 'gto_cxsw'")
		LIST(APPEND CPACK_NSIS_EXTRA_INSTALL_COMMANDS " WriteRegStr HKCR '.gtp' '' 'gtp_cxsw'")
		LIST(APPEND CPACK_NSIS_EXTRA_INSTALL_COMMANDS " WriteRegStr HKCR '.gts' '' 'gts_cxsw'")
		LIST(APPEND CPACK_NSIS_EXTRA_INSTALL_COMMANDS " WriteRegStr HKCR '.stp' '' 'stp_cxsw'")
		LIST(APPEND CPACK_NSIS_EXTRA_INSTALL_COMMANDS " WriteRegStr HKCR '.step' '' 'step_cxsw'")
		LIST(APPEND CPACK_NSIS_EXTRA_INSTALL_COMMANDS " WriteRegStr HKCR '.dae' '' 'dae_cxsw'")
		LIST(APPEND CPACK_NSIS_EXTRA_INSTALL_COMMANDS " WriteRegStr HKCR '.3mf' '' '3mf_cxsw'")
		LIST(APPEND CPACK_NSIS_EXTRA_INSTALL_COMMANDS " WriteRegStr HKCR '.3ds' '' '3ds_cxsw'")
		LIST(APPEND CPACK_NSIS_EXTRA_INSTALL_COMMANDS " WriteRegStr HKCR '.iges' '' 'iges_cxsw'")
		LIST(APPEND CPACK_NSIS_EXTRA_INSTALL_COMMANDS " WriteRegStr HKCR '.wrl' '' 'wrl_cxsw'")
		
		##add stl
		LIST(APPEND CPACK_NSIS_EXTRA_INSTALL_COMMANDS "WriteRegStr HKCR 'stl_cxsw' '' 'model (.stl)'")
		LIST(APPEND CPACK_NSIS_EXTRA_INSTALL_COMMANDS "WriteRegStr HKCR 'stl_cxsw\\\\DefaultIcon' '' '$INSTDIR\\\\${PROJECT_NAME}.exe,1'")
		LIST(APPEND CPACK_NSIS_EXTRA_INSTALL_COMMANDS "WriteRegStr HKCR 'stl_cxsw\\\\shell\\\\open\\\\command' '' '${PROGRAM_CMD}'")
		
		##add obj
		LIST(APPEND CPACK_NSIS_EXTRA_INSTALL_COMMANDS "WriteRegStr HKCR 'obj_cxsw' '' 'model (.obj)'")
		LIST(APPEND CPACK_NSIS_EXTRA_INSTALL_COMMANDS "WriteRegStr HKCR 'obj_cxsw\\\\DefaultIcon' '' '$INSTDIR\\\\${PROJECT_NAME}.exe,2'")
		LIST(APPEND CPACK_NSIS_EXTRA_INSTALL_COMMANDS "WriteRegStr HKCR 'obj_cxsw\\\\shell\\\\open\\\\command' '' '${PROGRAM_CMD}'")
		
		##add cxprj
		LIST(APPEND CPACK_NSIS_EXTRA_INSTALL_COMMANDS "WriteRegStr HKCR 'cx3d_cxsw' '' 'project (.cxprj)'")
		LIST(APPEND CPACK_NSIS_EXTRA_INSTALL_COMMANDS "WriteRegStr HKCR 'cx3d_cxsw\\\\DefaultIcon' '' '$INSTDIR\\\\${PROJECT_NAME}.exe,3'")
		LIST(APPEND CPACK_NSIS_EXTRA_INSTALL_COMMANDS "WriteRegStr HKCR 'cx3d_cxsw\\\\shell\\\\open\\\\command' '' '${PROGRAM_CMD}'")
		
		##add gcode
		LIST(APPEND CPACK_NSIS_EXTRA_INSTALL_COMMANDS "WriteRegStr HKCR 'gcode_cxsw' '' 'project (.gcode)'")
		LIST(APPEND CPACK_NSIS_EXTRA_INSTALL_COMMANDS "WriteRegStr HKCR 'gcode_cxsw\\\\DefaultIcon' '' '$INSTDIR\\\\${PROJECT_NAME}.exe,4'")
		LIST(APPEND CPACK_NSIS_EXTRA_INSTALL_COMMANDS "WriteRegStr HKCR 'gcode_cxsw\\\\shell\\\\open\\\\command' '' '${PROGRAM_CMD}'")

        ##add bmp
		LIST(APPEND CPACK_NSIS_EXTRA_INSTALL_COMMANDS "WriteRegStr HKCR 'bmp_cxsw' '' 'model (.bmp)'")
		LIST(APPEND CPACK_NSIS_EXTRA_INSTALL_COMMANDS "WriteRegStr HKCR 'bmp_cxsw\\\\DefaultIcon' '' '$INSTDIR\\\\${PROJECT_NAME}.exe,5'")
		LIST(APPEND CPACK_NSIS_EXTRA_INSTALL_COMMANDS "WriteRegStr HKCR 'bmp_cxsw\\\\shell\\\\open\\\\command' '' '${PROGRAM_CMD}'")

        ##add jpg
		LIST(APPEND CPACK_NSIS_EXTRA_INSTALL_COMMANDS "WriteRegStr HKCR 'jpg_cxsw' '' 'model (.jpg)'")
		LIST(APPEND CPACK_NSIS_EXTRA_INSTALL_COMMANDS "WriteRegStr HKCR 'jpg_cxsw\\\\DefaultIcon' '' '$INSTDIR\\\\${PROJECT_NAME}.exe,6'")
		LIST(APPEND CPACK_NSIS_EXTRA_INSTALL_COMMANDS "WriteRegStr HKCR 'jpg_cxsw\\\\shell\\\\open\\\\command' '' '${PROGRAM_CMD}'")

        ##add jpeg
		LIST(APPEND CPACK_NSIS_EXTRA_INSTALL_COMMANDS "WriteRegStr HKCR 'jpeg_cxsw' '' 'model (.jpeg)'")
		LIST(APPEND CPACK_NSIS_EXTRA_INSTALL_COMMANDS "WriteRegStr HKCR 'jpeg_cxsw\\\\DefaultIcon' '' '$INSTDIR\\\\${PROJECT_NAME}.exe,7'")
		LIST(APPEND CPACK_NSIS_EXTRA_INSTALL_COMMANDS "WriteRegStr HKCR 'jpeg_cxsw\\\\shell\\\\open\\\\command' '' '${PROGRAM_CMD}'")

        ##add png
		LIST(APPEND CPACK_NSIS_EXTRA_INSTALL_COMMANDS "WriteRegStr HKCR 'png_cxsw' '' 'model (.png)'")
		LIST(APPEND CPACK_NSIS_EXTRA_INSTALL_COMMANDS "WriteRegStr HKCR 'png_cxsw\\\\DefaultIcon' '' '$INSTDIR\\\\${PROJECT_NAME}.exe,8'")
		LIST(APPEND CPACK_NSIS_EXTRA_INSTALL_COMMANDS "WriteRegStr HKCR 'png_cxsw\\\\shell\\\\open\\\\command' '' '${PROGRAM_CMD}'")

        ##add gtl
		LIST(APPEND CPACK_NSIS_EXTRA_INSTALL_COMMANDS "WriteRegStr HKCR 'gtl_cxsw' '' 'model (.gtl)'")
		LIST(APPEND CPACK_NSIS_EXTRA_INSTALL_COMMANDS "WriteRegStr HKCR 'gtl_cxsw\\\\DefaultIcon' '' '$INSTDIR\\\\${PROJECT_NAME}.exe,9'")
		LIST(APPEND CPACK_NSIS_EXTRA_INSTALL_COMMANDS "WriteRegStr HKCR 'gtl_cxsw\\\\shell\\\\open\\\\command' '' '${PROGRAM_CMD}'")

        ##add gbl
		LIST(APPEND CPACK_NSIS_EXTRA_INSTALL_COMMANDS "WriteRegStr HKCR 'gbl_cxsw' '' 'model (.gbl)'")
		LIST(APPEND CPACK_NSIS_EXTRA_INSTALL_COMMANDS "WriteRegStr HKCR 'gbl_cxsw\\\\DefaultIcon' '' '$INSTDIR\\\\${PROJECT_NAME}.exe,10'")
		LIST(APPEND CPACK_NSIS_EXTRA_INSTALL_COMMANDS "WriteRegStr HKCR 'gbl_cxsw\\\\shell\\\\open\\\\command' '' '${PROGRAM_CMD}'")

        ##add gbo
		LIST(APPEND CPACK_NSIS_EXTRA_INSTALL_COMMANDS "WriteRegStr HKCR 'gbo_cxsw' '' 'model (.gbo)'")
		LIST(APPEND CPACK_NSIS_EXTRA_INSTALL_COMMANDS "WriteRegStr HKCR 'gbo_cxsw\\\\DefaultIcon' '' '$INSTDIR\\\\${PROJECT_NAME}.exe,11'")
		LIST(APPEND CPACK_NSIS_EXTRA_INSTALL_COMMANDS "WriteRegStr HKCR 'gbo_cxsw\\\\shell\\\\open\\\\command' '' '${PROGRAM_CMD}'")

        ##add gbp
		LIST(APPEND CPACK_NSIS_EXTRA_INSTALL_COMMANDS "WriteRegStr HKCR 'gbp_cxsw' '' 'model (.gbp)'")
		LIST(APPEND CPACK_NSIS_EXTRA_INSTALL_COMMANDS "WriteRegStr HKCR 'gbp_cxsw\\\\DefaultIcon' '' '$INSTDIR\\\\${PROJECT_NAME}.exe,12'")
		LIST(APPEND CPACK_NSIS_EXTRA_INSTALL_COMMANDS "WriteRegStr HKCR 'gbp_cxsw\\\\shell\\\\open\\\\command' '' '${PROGRAM_CMD}'")

        ##add gbs
		LIST(APPEND CPACK_NSIS_EXTRA_INSTALL_COMMANDS "WriteRegStr HKCR 'gbs_cxsw' '' 'model (.gbs)'")
		LIST(APPEND CPACK_NSIS_EXTRA_INSTALL_COMMANDS "WriteRegStr HKCR 'gbs_cxsw\\\\DefaultIcon' '' '$INSTDIR\\\\${PROJECT_NAME}.exe,13'")
		LIST(APPEND CPACK_NSIS_EXTRA_INSTALL_COMMANDS "WriteRegStr HKCR 'gbs_cxsw\\\\shell\\\\open\\\\command' '' '${PROGRAM_CMD}'")

        ##add gko
		LIST(APPEND CPACK_NSIS_EXTRA_INSTALL_COMMANDS "WriteRegStr HKCR 'gko_cxsw' '' 'model (.gko)'")
		LIST(APPEND CPACK_NSIS_EXTRA_INSTALL_COMMANDS "WriteRegStr HKCR 'gko_cxsw\\\\DefaultIcon' '' '$INSTDIR\\\\${PROJECT_NAME}.exe,14'")
		LIST(APPEND CPACK_NSIS_EXTRA_INSTALL_COMMANDS "WriteRegStr HKCR 'gko_cxsw\\\\shell\\\\open\\\\command' '' '${PROGRAM_CMD}'")

        ##add gml
		LIST(APPEND CPACK_NSIS_EXTRA_INSTALL_COMMANDS "WriteRegStr HKCR 'gml_cxsw' '' 'model (.gml)'")
		LIST(APPEND CPACK_NSIS_EXTRA_INSTALL_COMMANDS "WriteRegStr HKCR 'gml_cxsw\\\\DefaultIcon' '' '$INSTDIR\\\\${PROJECT_NAME}.exe,15'")
		LIST(APPEND CPACK_NSIS_EXTRA_INSTALL_COMMANDS "WriteRegStr HKCR 'gml_cxsw\\\\shell\\\\open\\\\command' '' '${PROGRAM_CMD}'")

        ##add gpb
		LIST(APPEND CPACK_NSIS_EXTRA_INSTALL_COMMANDS "WriteRegStr HKCR 'gpb_cxsw' '' 'model (.gpb)'")
		LIST(APPEND CPACK_NSIS_EXTRA_INSTALL_COMMANDS "WriteRegStr HKCR 'gpb_cxsw\\\\DefaultIcon' '' '$INSTDIR\\\\${PROJECT_NAME}.exe,16'")
		LIST(APPEND CPACK_NSIS_EXTRA_INSTALL_COMMANDS "WriteRegStr HKCR 'gpb_cxsw\\\\shell\\\\open\\\\command' '' '${PROGRAM_CMD}'")

        ##add gpt
		LIST(APPEND CPACK_NSIS_EXTRA_INSTALL_COMMANDS "WriteRegStr HKCR 'gpt_cxsw' '' 'model (.gpt)'")
		LIST(APPEND CPACK_NSIS_EXTRA_INSTALL_COMMANDS "WriteRegStr HKCR 'gpt_cxsw\\\\DefaultIcon' '' '$INSTDIR\\\\${PROJECT_NAME}.exe,17'")
		LIST(APPEND CPACK_NSIS_EXTRA_INSTALL_COMMANDS "WriteRegStr HKCR 'gpt_cxsw\\\\shell\\\\open\\\\command' '' '${PROGRAM_CMD}'")

        ##add gto
		LIST(APPEND CPACK_NSIS_EXTRA_INSTALL_COMMANDS "WriteRegStr HKCR 'gto_cxsw' '' 'model (.gto)'")
		LIST(APPEND CPACK_NSIS_EXTRA_INSTALL_COMMANDS "WriteRegStr HKCR 'gto_cxsw\\\\DefaultIcon' '' '$INSTDIR\\\\${PROJECT_NAME}.exe,18'")
		LIST(APPEND CPACK_NSIS_EXTRA_INSTALL_COMMANDS "WriteRegStr HKCR 'gto_cxsw\\\\shell\\\\open\\\\command' '' '${PROGRAM_CMD}'")

        ##add gtp
		LIST(APPEND CPACK_NSIS_EXTRA_INSTALL_COMMANDS "WriteRegStr HKCR 'gtp_cxsw' '' 'model (.gtp)'")
		LIST(APPEND CPACK_NSIS_EXTRA_INSTALL_COMMANDS "WriteRegStr HKCR 'gtp_cxsw\\\\DefaultIcon' '' '$INSTDIR\\\\${PROJECT_NAME}.exe,18'")
		LIST(APPEND CPACK_NSIS_EXTRA_INSTALL_COMMANDS "WriteRegStr HKCR 'gtp_cxsw\\\\shell\\\\open\\\\command' '' '${PROGRAM_CMD}'")

        ##add gts
		LIST(APPEND CPACK_NSIS_EXTRA_INSTALL_COMMANDS "WriteRegStr HKCR 'gts_cxsw' '' 'model (.gts)'")
		LIST(APPEND CPACK_NSIS_EXTRA_INSTALL_COMMANDS "WriteRegStr HKCR 'gts_cxsw\\\\DefaultIcon' '' '$INSTDIR\\\\${PROJECT_NAME}.exe,19'")
		LIST(APPEND CPACK_NSIS_EXTRA_INSTALL_COMMANDS "WriteRegStr HKCR 'gts_cxsw\\\\shell\\\\open\\\\command' '' '${PROGRAM_CMD}'")

        ##add stp
		LIST(APPEND CPACK_NSIS_EXTRA_INSTALL_COMMANDS "WriteRegStr HKCR 'stp_cxsw' '' 'model (.stp)'")
		LIST(APPEND CPACK_NSIS_EXTRA_INSTALL_COMMANDS "WriteRegStr HKCR 'stp_cxsw\\\\DefaultIcon' '' '$INSTDIR\\\\${PROJECT_NAME}.exe,20'")
		LIST(APPEND CPACK_NSIS_EXTRA_INSTALL_COMMANDS "WriteRegStr HKCR 'stp_cxsw\\\\shell\\\\open\\\\command' '' '${PROGRAM_CMD}'")

        ##add step
		LIST(APPEND CPACK_NSIS_EXTRA_INSTALL_COMMANDS "WriteRegStr HKCR 'step_cxsw' '' 'model (.step)'")
		LIST(APPEND CPACK_NSIS_EXTRA_INSTALL_COMMANDS "WriteRegStr HKCR 'step_cxsw\\\\DefaultIcon' '' '$INSTDIR\\\\${PROJECT_NAME}.exe,21'")
		LIST(APPEND CPACK_NSIS_EXTRA_INSTALL_COMMANDS "WriteRegStr HKCR 'step_cxsw\\\\shell\\\\open\\\\command' '' '${PROGRAM_CMD}'")

        ##add dae
		LIST(APPEND CPACK_NSIS_EXTRA_INSTALL_COMMANDS "WriteRegStr HKCR 'dae_cxsw' '' 'model (.dae)'")
		LIST(APPEND CPACK_NSIS_EXTRA_INSTALL_COMMANDS "WriteRegStr HKCR 'dae_cxsw\\\\DefaultIcon' '' '$INSTDIR\\\\${PROJECT_NAME}.exe,22'")
		LIST(APPEND CPACK_NSIS_EXTRA_INSTALL_COMMANDS "WriteRegStr HKCR 'dae_cxsw\\\\shell\\\\open\\\\command' '' '${PROGRAM_CMD}'")

        ##add 3mf
		LIST(APPEND CPACK_NSIS_EXTRA_INSTALL_COMMANDS "WriteRegStr HKCR '3mf_cxsw' '' 'model (.3mf)'")
		LIST(APPEND CPACK_NSIS_EXTRA_INSTALL_COMMANDS "WriteRegStr HKCR '3mf_cxsw\\\\DefaultIcon' '' '$INSTDIR\\\\${PROJECT_NAME}.exe,23'")
		LIST(APPEND CPACK_NSIS_EXTRA_INSTALL_COMMANDS "WriteRegStr HKCR '3mf_cxsw\\\\shell\\\\open\\\\command' '' '${PROGRAM_CMD}'")

        ##add 3ds
		LIST(APPEND CPACK_NSIS_EXTRA_INSTALL_COMMANDS "WriteRegStr HKCR '3ds_cxsw' '' 'model (.3ds)'")
		LIST(APPEND CPACK_NSIS_EXTRA_INSTALL_COMMANDS "WriteRegStr HKCR '3ds_cxsw\\\\DefaultIcon' '' '$INSTDIR\\\\${PROJECT_NAME}.exe,24'")
		LIST(APPEND CPACK_NSIS_EXTRA_INSTALL_COMMANDS "WriteRegStr HKCR '3ds_cxsw\\\\shell\\\\open\\\\command' '' '${PROGRAM_CMD}'")

        ##add iges
		LIST(APPEND CPACK_NSIS_EXTRA_INSTALL_COMMANDS "WriteRegStr HKCR 'iges_cxsw' '' 'model (.iges)'")
		LIST(APPEND CPACK_NSIS_EXTRA_INSTALL_COMMANDS "WriteRegStr HKCR 'iges_cxsw\\\\DefaultIcon' '' '$INSTDIR\\\\${PROJECT_NAME}.exe,25'")
		LIST(APPEND CPACK_NSIS_EXTRA_INSTALL_COMMANDS "WriteRegStr HKCR 'iges_cxsw\\\\shell\\\\open\\\\command' '' '${PROGRAM_CMD}'")

        ##add wrl
		LIST(APPEND CPACK_NSIS_EXTRA_INSTALL_COMMANDS "WriteRegStr HKCR 'wrl_cxsw' '' 'model (.wrl)'")
		LIST(APPEND CPACK_NSIS_EXTRA_INSTALL_COMMANDS "WriteRegStr HKCR 'wrl_cxsw\\\\DefaultIcon' '' '$INSTDIR\\\\${PROJECT_NAME}.exe,26'")
		LIST(APPEND CPACK_NSIS_EXTRA_INSTALL_COMMANDS "WriteRegStr HKCR 'wrl_cxsw\\\\shell\\\\open\\\\command' '' '${PROGRAM_CMD}'")

        LIST(APPEND CPACK_NSIS_EXTRA_INSTALL_COMMANDS "CreateDirectory $APPDATA\\\\Creality")
        LIST(APPEND CPACK_NSIS_EXTRA_INSTALL_COMMANDS "CreateDirectory $APPDATA\\\\Creality\\\\${PROJECT_NAME}")
        LIST(APPEND CPACK_NSIS_EXTRA_INSTALL_COMMANDS "CreateDirectory $APPDATA\\\\Creality\\\\${PROJECT_NAME}\\\\resources")
        LIST(APPEND CPACK_NSIS_EXTRA_INSTALL_COMMANDS "CopyFiles '$INSTDIR\\\\resources\\\\' '$APPDATA\\\\${PROJECT_NAME}\\\\resources'")
		prepareNSIS_Link("${DESKTOP_LINK_NAME}" "${PROJECT_NAME}" "")
		STRING (REPLACE ";" "\n" CPACK_NSIS_CREATE_ICONS_EXTRA "${CPACK_NSIS_CREATE_ICONS_EXTRA}") 
		STRING (REPLACE ";" "\n" CPACK_NSIS_DELETE_ICONS_EXTRA "${CPACK_NSIS_DELETE_ICONS_EXTRA}") 
        STRING (REPLACE ";" "\n" CPACK_NSIS_EXTRA_INSTALL_COMMANDS "${CPACK_NSIS_EXTRA_INSTALL_COMMANDS}")
		
		#unstall
		 #LIST(APPEND CPACK_NSIS_EXTRA_UNINSTALL_COMMANDS "\${nsProcess::KillProcess} 'Creative3D.exe' $R0")
		 #LIST(APPEND CPACK_NSIS_EXTRA_UNINSTALL_COMMANDS "Sleep 3000")
		 LIST(APPEND CPACK_NSIS_EXTRA_UNINSTALL_COMMANDS "SetShellVarContext current")
		 LIST(APPEND CPACK_NSIS_EXTRA_UNINSTALL_COMMANDS "DeleteRegKey HKCU 'Software\\Creality\\Creative3D'")
		 
		 LIST(APPEND CPACK_NSIS_EXTRA_UNINSTALL_COMMANDS "DeleteRegKey HKCR 'stl_cxsw'")
		 LIST(APPEND CPACK_NSIS_EXTRA_UNINSTALL_COMMANDS "DeleteRegKey HKCR 'obj_cxsw'")
		 LIST(APPEND CPACK_NSIS_EXTRA_UNINSTALL_COMMANDS "DeleteRegKey HKCR 'cx3d_cxsw'")
		 LIST(APPEND CPACK_NSIS_EXTRA_UNINSTALL_COMMANDS "DeleteRegKey HKCR 'gcode_cxsw'")
		 LIST(APPEND CPACK_NSIS_EXTRA_UNINSTALL_COMMANDS "DeleteRegKey HKCR 'bmp_cxsw'")
		 LIST(APPEND CPACK_NSIS_EXTRA_UNINSTALL_COMMANDS "DeleteRegKey HKCR 'jpg_cxsw'")
		 LIST(APPEND CPACK_NSIS_EXTRA_UNINSTALL_COMMANDS "DeleteRegKey HKCR 'png_cxsw'")
		 LIST(APPEND CPACK_NSIS_EXTRA_UNINSTALL_COMMANDS "DeleteRegKey HKCR 'gtl_cxsw'")
		 LIST(APPEND CPACK_NSIS_EXTRA_UNINSTALL_COMMANDS "DeleteRegKey HKCR 'gbl_cxsw'")
		 LIST(APPEND CPACK_NSIS_EXTRA_UNINSTALL_COMMANDS "DeleteRegKey HKCR 'gbo_cxsw'")
		 LIST(APPEND CPACK_NSIS_EXTRA_UNINSTALL_COMMANDS "DeleteRegKey HKCR 'gbp_cxsw'")
		 LIST(APPEND CPACK_NSIS_EXTRA_UNINSTALL_COMMANDS "DeleteRegKey HKCR 'gbs_cxsw'")
		 LIST(APPEND CPACK_NSIS_EXTRA_UNINSTALL_COMMANDS "DeleteRegKey HKCR 'gko_cxsw'")
		 LIST(APPEND CPACK_NSIS_EXTRA_UNINSTALL_COMMANDS "DeleteRegKey HKCR 'gml_cxsw'")
		 LIST(APPEND CPACK_NSIS_EXTRA_UNINSTALL_COMMANDS "DeleteRegKey HKCR 'gpb_cxsw'")
		 LIST(APPEND CPACK_NSIS_EXTRA_UNINSTALL_COMMANDS "DeleteRegKey HKCR 'gpt_cxsw'")
		 LIST(APPEND CPACK_NSIS_EXTRA_UNINSTALL_COMMANDS "DeleteRegKey HKCR 'gto_cxsw'")
		 LIST(APPEND CPACK_NSIS_EXTRA_UNINSTALL_COMMANDS "DeleteRegKey HKCR 'gtp_cxsw'")
		 LIST(APPEND CPACK_NSIS_EXTRA_UNINSTALL_COMMANDS "DeleteRegKey HKCR 'gts_cxsw'")
		 LIST(APPEND CPACK_NSIS_EXTRA_UNINSTALL_COMMANDS "DeleteRegKey HKCR 'stp_cxsw'")
		 LIST(APPEND CPACK_NSIS_EXTRA_UNINSTALL_COMMANDS "DeleteRegKey HKCR 'step_cxsw'")
		 LIST(APPEND CPACK_NSIS_EXTRA_UNINSTALL_COMMANDS "DeleteRegKey HKCR 'dae_cxsw'")
		 LIST(APPEND CPACK_NSIS_EXTRA_UNINSTALL_COMMANDS "DeleteRegKey HKCR '3mf_cxsw'")
		 LIST(APPEND CPACK_NSIS_EXTRA_UNINSTALL_COMMANDS "DeleteRegKey HKCR '3ds_cxsw'")
		 LIST(APPEND CPACK_NSIS_EXTRA_UNINSTALL_COMMANDS "DeleteRegKey HKCR 'iges_cxsw'")
		 LIST(APPEND CPACK_NSIS_EXTRA_UNINSTALL_COMMANDS "DeleteRegKey HKCR 'wrl_cxsw'")
		 
		 LIST(APPEND CPACK_NSIS_EXTRA_UNINSTALL_COMMANDS "RMDir /r '$APPDATA\\\\Creality\\\\Creative3D'")
		 LIST(APPEND CPACK_NSIS_EXTRA_UNINSTALL_COMMANDS "RMDir /r '$LOCALAPPDATA\\\\Creality\\\\Creative3D'")
         LIST(APPEND CPACK_NSIS_EXTRA_UNINSTALL_COMMANDS "RMDir /r '$INSTDIR\\resources'")
		 LIST(APPEND CPACK_NSIS_EXTRA_UNINSTALL_COMMANDS "SetShellVarContext all")
		 LIST(APPEND CPACK_NSIS_EXTRA_UNINSTALL_COMMANDS "Delete '$INSTDIR\\\\*.csv'")
		 LIST(APPEND CPACK_NSIS_EXTRA_UNINSTALL_COMMANDS "Delete '$INSTDIR\\\\*_show'")
		 STRING (REPLACE ";" "\n" CPACK_NSIS_EXTRA_UNINSTALL_COMMANDS "${CPACK_NSIS_EXTRA_UNINSTALL_COMMANDS}")
    ELSEIF(APPLE)
         SET(CPACK_GENERATOR "DragNDrop")
        set(CPACK_SYSTEM_NAME "macx") 
        set(prefix "${PROJECT_NAME}.app/Contents")
        set(INSTALL_RUNTIME_DIR "${prefix}/MacOS")
        set(INSTALL_CMAKE_DIR "${prefix}/Resources")
        set(INSTALL_PLUGIN_DIR "${prefix}/PlugIns")
        set(INSTALL_LIB_DIR "${prefix}/Frameworks")
        macro(install_qt5_plugin _qt_plugin_name _qt_plugins_var _prefix)
            get_target_property(_qt_plugin_path "${_qt_plugin_name}" LOCATION)
            if(EXISTS "${_qt_plugin_path}")
                get_filename_component(_qt_plugin_file "${_qt_plugin_path}" NAME)
                get_filename_component(_qt_plugin_type "${_qt_plugin_path}" PATH)
                get_filename_component(_qt_plugin_type "${_qt_plugin_type}" NAME)
                set(_qt_plugin_dest "${_prefix}/PlugIns/${_qt_plugin_type}")
                install(FILES "${_qt_plugin_path}"
                    DESTINATION "${_qt_plugin_dest}")
                set(${_qt_plugins_var}
                    "${${_qt_plugins_var}};\$ENV{DEST_DIR}\${CMAKE_INSTALL_PREFIX}/${_qt_plugin_dest}/${_qt_plugin_file}")
            else()
                message(FATAL_ERROR "QT plugin ${_qt_plugin_name} not found")
            endif()
        endmacro()

        set(LIB_PUGINS)
        install_qt5_plugin("Qt5::QCocoaIntegrationPlugin" LIB_PUGINS ${prefix})

        
        
        file(WRITE "${CMAKE_CURRENT_BINARY_DIR}/qt.conf"
            "[Paths]\nPlugins = ${_qt_plugin_dir}\n")
        install(FILES "${CMAKE_CURRENT_BINARY_DIR}/qt.conf"
            DESTINATION "${INSTALL_CMAKE_DIR}")
        INSTALL(DIRECTORY "${BIN_OUTPUT_DIR}/Release/fonts" DESTINATION "${INSTALL_CMAKE_DIR}")
        INSTALL(DIRECTORY "${LIB_OUTPUT_DIR}/Release/CrealityUI" DESTINATION ${INSTALL_CMAKE_DIR}/qml)
        # Destination paths below are relative to ${CMAKE_INSTALL_PREFIX}
        #install(TARGETS ${PROJECT_NAME}
        #    BUNDLE DESTINATION . COMPONENT Runtime
       #     RUNTIME DESTINATION ${INSTALL_RUNTIME_DIR} COMPONENT Runtime
       #     )
        
        #install(TARGETS ${INSTALL_LIBS}
        #    BUNDLE DESTINATION ./Creative3D.app/Contents/MacOS/ COMPONENT Runtime
        #   )
        message(STATUS ${INSTALL_LIBS})
        INSTALL(TARGETS ${INSTALL_LIBS}
            BUNDLE DESTINATION . COMPONENT Runtime
            RUNTIME DESTINATION ${INSTALL_RUNTIME_DIR}
            FRAMEWORK DESTINATION ${INSTALL_LIB_DIR}
            ARCHIVE DESTINATION ${INSTALL_LIB_DIR}
              LIBRARY DESTINATION ${INSTALL_LIB_DIR}
            )
        INSTALL(TARGETS CrealityUI
            BUNDLE DESTINATION . COMPONENT Runtime
            RUNTIME DESTINATION ${INSTALL_RUNTIME_DIR}
            FRAMEWORK DESTINATION ${INSTALL_CMAKE_DIR}/qml/CrealityUI
            ARCHIVE DESTINATION ${INSTALL_CMAKE_DIR}/qml/CrealityUI
              LIBRARY DESTINATION ${INSTALL_CMAKE_DIR}/qml/CrealityUI
            )
        # Note Mac specific extension .app
        set(APPS "\$ENV{DESTDIR}\${CMAKE_INSTALL_PREFIX}/${PROJECT_NAME}.app")

        # Directories to look for dependencies
        set(DIRS "${CMAKE_BINARY_DIR}")

        # Path used for searching by FIND_XXX(), with appropriate suffixes added
        if(CMAKE_PREFIX_PATH)
            foreach(dir ${CMAKE_PREFIX_PATH})
                list(APPEND DIRS "${dir}/bin" "${dir}/lib")
            endforeach()
        endif()

        # Append Qt's lib folder which is two levels above Qt5Widgets_DIR
        list(APPEND DIRS "${Qt5Widgets_DIR}/../..")
        list(APPEND DIRS "/usr/local/lib/Release")
        list(APPEND DIRS "${LIB_OUTPUT_DIR}/Release")
        include(InstallRequiredSystemLibraries)

        message(STATUS "APPS: ${APPS}")
        message(STATUS "QT_PLUGINS: ${LIB_PUGINS}")
        message(STATUS "DIRS: ${DIRS}")
        message(STATUS "out dir: ${PUGINS_PATH_VAR}")
                    


        ## copy dylib to app
        #add_custom_target(copy_libs ALL DEPENDS packaging COMMENT "copy Package...")
        #add_custom_command(
        #    TARGET copy_libs PRE_BUILD
        #    COMMAND ${CMAKE_COMMAND} -E copy "${LIB_OUTPUT_DIR}/Release/*.dylib" ${INSTALL_RUNTIME_DIR}
        #    WORKING_DIRECTORY ${BIN_OUTPUT_DIR}/Release
        #)
        set(OSX_CODESIGN_IDENTITY "Developer ID Application" CACHE STRING "Identity to use for code signing")
        # add_custom_target(packaging ALL DEPENDS ${PROJECT_NAME} COMMENT "Packaging Projects...")
        #add_custom_target(signing ALL DEPENDS packaging COMMENT "Signing Package...")
        #add_custom_command(
        #    TARGET signing PRE_BUILD
        #    COMMAND ${CMAKE_CURRENT_SOURCE_DIR}/package/macx/fix_codesign_issues.sh ${BUNDLE_NAME}
        #    WORKING_DIRECTORY ${BIN_OUTPUT_DIR}/Release
        #)

        #add_custom_command(
        #    TARGET signing PRE_BUILD
        #    COMMAND codesign -s ${OSX_CODESIGN_IDENTITY} --deep "${BUNDLE_NAME}.app"
        #    WORKING_DIRECTORY ${BIN_OUTPUT_DIR}/Release
        #)
        #file(GLOB_RECURSE QTPLUGINS ${CMAKE_BINARY_DIR}/install/${INSTALL_PLUGIN_DIR}/*${CMAKE_SHARED_LIBRARY_SUFFIX})
        #    message(STATUS ${QTPLUGINS})
        #install(CODE "file(GLOB_RECURSE QTPLUGINS \"/Users/creality/work/c3d/build/install/Creative3D.app/Contents/PlugIns/*.dylib\")
        #message(STATUS \${QTPLUGINS})
        #")
        #install(CODE "include(BundleUtilities)
        #file(GLOB_RECURSE QMLPLUGINS \${CMAKE_INSTALL_PREFIX}/${INSTALL_CMAKE_DIR}/qml/*${CMAKE_SHARED_LIBRARY_SUFFIX})
        #    file(GLOB_RECURSE QTPLUGINS \${CMAKE_INSTALL_PREFIX}/${INSTALL_PLUGIN_DIR}/*${CMAKE_SHARED_LIBRARY_SUFFIX})
        #    list(APPEND LIB_PUGINS \${QMLPLUGINS} \${QTPLUGINS} ${LIB_PUGINS})
            #message(STATUS \${LIB_PUGINS})
        #    fixup_bundle(\"${APPS}\" \"\${LIB_PUGINS}\" \"${DIRS}\")"
        #    )
        #install(CODE "include(BundleUtilities)
        #    verify_app(\"\${CMAKE_INSTALL_PREFIX}/${PROJECT_NAME}.app\")
        #    message(FATAL_ERROR)")
        #        INSTALL(TARGETS ${INSTALL_LIBS} RUNTIME DESTINATION .)
        #install(FILES "${PUGINS_PATH_VAR}/libBasicKernel.dylib" DESTINATION "${plugin_dest}")
        #install(FILES "${PUGINS_PATH_VAR}/libCreativeKernel.dylib" DESTINATION "${plugin_dest}")
        #install(FILES "${PUGINS_PATH_VAR}/libEngineWrapper.dylib" DESTINATION "${plugin_dest}")
        #install(FILES "${PUGINS_PATH_VAR}/libfmesh.dylib" DESTINATION "${plugin_dest}")
        
        INSTALL(FILES  /usr/local/lib/Release/libzlib.dylib DESTINATION "${prefix}/Frameworks/")
        INSTALL(FILES  /usr/local/opt/libomp/lib/libomp.dylib DESTINATION "${prefix}/Frameworks/")
        INSTALL(FILES  /usr/local/lib/Release/libdxflib.dylib DESTINATION "${prefix}/Frameworks/")
        INSTALL(FILES  /usr/local/lib/Release/libquazip.dylib DESTINATION "${prefix}/Frameworks/")
        INSTALL(FILES  /usr/local/lib/Release/libfreetype.dylib DESTINATION "${prefix}/Frameworks/")
        INSTALL(FILES  /usr/local/lib/Release/liblibrevenge.dylib DESTINATION "${prefix}/Frameworks/")
        INSTALL(FILES  /usr/local/lib/Release/libAliyunOss.dylib DESTINATION "${prefix}/Frameworks/")
        INSTALL(FILES  /usr/local/lib/Release/libcurl.dylib DESTINATION "${prefix}/Frameworks/")
        #INSTALL(FILES  /usr/local/lib/Release/libopennurbs.dylib DESTINATION "${prefix}/Frameworks/")
        INSTALL(FILES  /usr/local/lib/Release/libTKBO.dylib DESTINATION "${prefix}/Frameworks/")
        INSTALL(FILES  /usr/local/lib/Release/libTKBool.dylib DESTINATION "${prefix}/Frameworks/")
        INSTALL(FILES  /usr/local/lib/Release/libTKernel.dylib DESTINATION "${prefix}/Frameworks/")
        INSTALL(FILES  /usr/local/lib/Release/libTKG2d.dylib DESTINATION "${prefix}/Frameworks/")
        INSTALL(FILES  /usr/local/lib/Release/libTKG3d.dylib DESTINATION "${prefix}/Frameworks/")
        INSTALL(FILES  /usr/local/lib/Release/libTKGeomAlgo.dylib DESTINATION "${prefix}/Frameworks/")
        INSTALL(FILES  /usr/local/lib/Release/libTKGeomBase.dylib DESTINATION "${prefix}/Frameworks/")
        INSTALL(FILES  /usr/local/lib/Release/libTKMath.dylib DESTINATION "${prefix}/Frameworks/")
        INSTALL(FILES  /usr/local/lib/Release/libTKMesh.dylib DESTINATION "${prefix}/Frameworks/")
        INSTALL(FILES  /usr/local/lib/Release/libTKPrim.dylib DESTINATION "${prefix}/Frameworks/")
        INSTALL(FILES  /usr/local/lib/Release/libTKShHealing.dylib DESTINATION "${prefix}/Frameworks/")
        INSTALL(FILES  /usr/local/lib/Release/libTKSTEP.dylib DESTINATION "${prefix}/Frameworks/")
        INSTALL(FILES  /usr/local/lib/Release/libTKSTEP209.dylib DESTINATION "${prefix}/Frameworks/")
        INSTALL(FILES  /usr/local/lib/Release/libTKSTEPAttr.dylib DESTINATION "${prefix}/Frameworks/")
        INSTALL(FILES  /usr/local/lib/Release/libTKSTEPBase.dylib DESTINATION "${prefix}/Frameworks/")
        INSTALL(FILES  /usr/local/lib/Release/libTKTopAlgo.dylib DESTINATION "${prefix}/Frameworks/")
        INSTALL(FILES  /usr/local/lib/Release/libTKXSBase.dylib DESTINATION "${prefix}/Frameworks/")
        INSTALL(FILES  /usr/local/lib/Release/libTKIGES.dylib DESTINATION "${prefix}/Frameworks/")
        INSTALL(FILES  /usr/local/lib/Release/libTKBRep.dylib DESTINATION "${prefix}/Frameworks/")

        #INSTALL(FILES  /usr/local/lib/Release/libplayerFfmpeg.dylib DESTINATION "${prefix}/Frameworks/")

        INSTALL(FILES  "${CMAKE_SOURCE_DIR}/ppcs/Lib/osX/x64/libPPCS_API.dylib" DESTINATION "${prefix}/Frameworks/")
        INSTALL(FILES  "${CMAKE_SOURCE_DIR}/ffmpeglib/bin_osX/libavcodec.58.dylib" DESTINATION "${prefix}/Frameworks/")
        INSTALL(FILES  "${CMAKE_SOURCE_DIR}/ffmpeglib/bin_osX/libavdevice.58.dylib" DESTINATION "${prefix}/Frameworks/")
        INSTALL(FILES  "${CMAKE_SOURCE_DIR}/ffmpeglib/bin_osX/libavfilter.7.dylib" DESTINATION "${prefix}/Frameworks/")
        INSTALL(FILES  "${CMAKE_SOURCE_DIR}/ffmpeglib/bin_osX/libavformat.58.dylib" DESTINATION "${prefix}/Frameworks/")
        INSTALL(FILES  "${CMAKE_SOURCE_DIR}/ffmpeglib/bin_osX/libavutil.56.dylib" DESTINATION "${prefix}/Frameworks/")
        INSTALL(FILES  "${CMAKE_SOURCE_DIR}/ffmpeglib/bin_osX/libpostproc.55.dylib" DESTINATION "${prefix}/Frameworks/")
        INSTALL(FILES  "${CMAKE_SOURCE_DIR}/ffmpeglib/bin_osX/libswresample.3.dylib" DESTINATION "${prefix}/Frameworks/")
        INSTALL(FILES  "${CMAKE_SOURCE_DIR}/ffmpeglib/bin_osX/libswscale.5.dylib" DESTINATION "${prefix}/Frameworks/")

        
        INSTALL(DIRECTORY  "${CMAKE_SOURCE_DIR}/resources/fonts" DESTINATION "${INSTALL_CMAKE_DIR}/resources/")
        INSTALL(DIRECTORY  "${CMAKE_SOURCE_DIR}/resources/manual" DESTINATION "${INSTALL_CMAKE_DIR}/resources/")
        INSTALL(DIRECTORY  "${CMAKE_SOURCE_DIR}/resources/mesh" DESTINATION "${INSTALL_CMAKE_DIR}/resources/")
        
        #install(CODE "execute_process(COMMAND rm -R \"\${CMAKE_INSTALL_PREFIX}/${PROJECT_NAME}.app/Contents/MacOS/resources\")")

        #install(CODE "include(BundleUtilities)
        #file(GLOB_RECURSE QMLPLUGINS \${CMAKE_INSTALL_PREFIX}/${INSTALL_CMAKE_DIR}/qml/*${CMAKE_SHARED_LIBRARY_SUFFIX})
        #    file(GLOB_RECURSE QTPLUGINS \${CMAKE_INSTALL_PREFIX}/${INSTALL_PLUGIN_DIR}/*${CMAKE_SHARED_LIBRARY_SUFFIX})
        #    list(APPEND LIB_PUGINS \${QMLPLUGINS} \${QTPLUGINS} ${LIB_PUGINS})
            #message(STATUS \${LIB_PUGINS})
         #   fixup_bundle(\"${APPS}\" \"\${LIB_PUGINS}\" \"${DIRS}\")"
         #   )
        install(CODE "execute_process(COMMAND codesign --timestamp --force --options=runtime -s \"${OSX_CODESIGN_IDENTITY}\"  \"\${CMAKE_INSTALL_PREFIX}/${PROJECT_NAME}.app/Contents/Resources/qml/CrealityUI/libCrealityUI.dylib\")")
        install(CODE "execute_process(COMMAND codesign --timestamp --force --options=runtime -s \"${OSX_CODESIGN_IDENTITY}\" --deep \"\${CMAKE_INSTALL_PREFIX}/${PROJECT_NAME}.app\")")
        install(CODE "execute_process(COMMAND bash  ${CMAKE_CURRENT_SOURCE_DIR}/package/macx/Notarized-script.sh \${CMAKE_INSTALL_PREFIX} ${PROJECT_NAME} $ENV{MACPASS})")
	set(CPACK_GENERATOR "DragNDrop")
        set(CPACK_PACKAGE_FILE_NAME "${BUNDLE_NAME}-${PROJECT_VERSION}")
        set(CPACK_DMG_VOLUME_NAME "Creality Print App")
        set(CPACK_DMG_BACKGROUND_IMAGE "${CMAKE_CURRENT_SOURCE_DIR}/package/macx/CMakeDMGBackground.tif")
        set(CPACK_PACKAGE_ICON "${CMAKE_CURRENT_SOURCE_DIR}/package/macx/VolumeIcon.icns")
        set(CPACK_DMG_DS_STORE_SETUP_SCRIPT "${CMAKE_CURRENT_SOURCE_DIR}/package/macx/CMakeDMGSetup.scpt")
         # SET(CPACK_PACKAGE_ICON "${ICONS_DIR}/DMG.icns")
         # SET(CPACK_DMG_DS_STORE "${ICONS_DIR}/DMGDSStore")
         # SET(CPACK_DMG_BACKGROUND_IMAGE "${ICONS_DIR}/DMGBackground.png")
    ELSEIF(UNIX)
        INSTALL(TARGETS ${INSTALL_LIBS} RUNTIME DESTINATION bin LIBRARY DESTINATION lib)
        
        IF(DEFINED ENV{QT5_DIR})
            file(GLOB QT5FILES "$ENV{QT5_DIR}/lib/lib*.so*[^g]")  # !debug
            INSTALL(FILES ${QT5FILES} DESTINATION ${CMAKE_INSTALL_PREFIX}/lib/x86_64-linux-gnu/)
        ELSE()
            file(GLOB QT5FILES "/usr/local/lib/lib*.so*[^g]")  # !debug
            INSTALL(FILES ${QT5FILES} DESTINATION ${CMAKE_INSTALL_PREFIX}/lib/x86_64-linux-gnu/)
        ENDIF()

        INSTALL(FILES ${ENGINE_WRAPPER_DIR}/core/wrapperoutput.h DESTINATION include/core)
        SET(CPACK_GENERATOR "DEB")
        set(CPACK_DEBIAN_PACKAGE_MAINTAINER "hemiao")
        set(CPACK_DEBIAN_PACKAGE_DESCRIPTION "Creative3D Slice Program")
        set(CPACK_DEBIAN_PACKAGE_VERSION ${PROJECT_VERSION})
        set(CPACK_DEBIAN_FILE_NAME DEB-DEFAULT)
        set(CPACK_DEBIAN_PACKAGE_DEPENDS "libc6 (>= 2.3.1-6), libc6 (<< 3)")
    ENDIF()

    # install MSVC redistributables and files listed in CMAKE_INSTALL_DEBUG_LIBRARIES
    set(CPACK_PACKAGE_FILE_NAME "${CPACK_FILE_NAME_NO_SPACES}-v${PROJECT_VERSION}-${CPACK_SYSTEM_NAME}-${PROJECT_VERSION_EXTRA}")
	set(SIGN_CPACK_PACKAGE_FILE_NAME ${CPACK_PACKAGE_FILE_NAME})
    INCLUDE(CPack)
ENDIF()
